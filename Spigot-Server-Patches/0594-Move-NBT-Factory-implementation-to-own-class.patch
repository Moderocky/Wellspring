From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Moderocky <admin@moderocky.com>
Date: Tue, 22 Sep 2020 17:38:23 +0100
Subject: [PATCH] Move NBT Factory implementation to own class.


diff --git a/src/main/java/mx/kenzie/server/nbt/NBTFactoryImplementation.java b/src/main/java/mx/kenzie/server/nbt/NBTFactoryImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..1bc043b090a045eeb63bdb7a0e97b629c714903a
--- /dev/null
+++ b/src/main/java/mx/kenzie/server/nbt/NBTFactoryImplementation.java
@@ -0,0 +1,107 @@
+package mx.kenzie.server.nbt;
+
+import mx.kenzie.wellspring.nbt.NBT;
+import mx.kenzie.wellspring.nbt.NBTCompound;
+import mx.kenzie.wellspring.nbt.NBTFactory;
+import mx.kenzie.wellspring.nbt.NBTList;
+import net.minecraft.server.*;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.Entity;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.List;
+
+public class NBTFactoryImplementation extends NBTFactory {
+
+    public NBTFactoryImplementation() {
+
+    }
+
+    @Override
+    public NBTCompound parse(String string) throws IllegalArgumentException {
+        try {
+            return MojangsonParser.parse(string);
+        } catch (Throwable ex) {
+            throw new IllegalArgumentException("NBT compound could not be parsed!", ex);
+        }
+    }
+
+    @Override
+    public NBTCompound newCompound() {
+        return new NBTTagCompound();
+    }
+
+    @Override
+    public mx.kenzie.wellspring.nbt.NBTList newList() {
+        return new NBTTagList();
+    }
+
+    @Override
+    public NBT newBase(Object object, NBT.Type type) {
+        try {
+            switch (type) {
+                case BOOLEAN:
+                    return NBTTagByte.a((Boolean) object);
+                case BYTE:
+                    return NBTTagByte.a((Byte) object);
+                case INT:
+                    return NBTTagInt.a((Integer) object);
+                case SHORT:
+                    return NBTTagShort.a((Short) object);
+                case LONG:
+                    return NBTTagLong.a((Long) object);
+                case FLOAT:
+                    return NBTTagFloat.a((Float) object);
+                case DOUBLE:
+                    return NBTTagDouble.a((Double) object);
+                case BYTE_ARRAY:
+                    if (object instanceof byte[])
+                        return new NBTTagByteArray((byte[]) object);
+                    else if (object instanceof List)
+                        return new NBTTagByteArray((List<Byte>) object);
+                    break;
+                case INT_ARRAY:
+                    if (object instanceof int[])
+                        return new NBTTagIntArray((int[]) object);
+                    else if (object instanceof List)
+                        return new NBTTagIntArray((List<Integer>) object);
+                    break;
+                case LONG_ARRAY:
+                    if (object instanceof long[])
+                        return new NBTTagLongArray((long[]) object);
+                    else if (object instanceof List)
+                        return new NBTTagLongArray((List<Long>) object);
+                    break;
+                case STRING:
+                    return NBTTagString.a((String) object);
+                case LIST:
+                    return (NBTList) object;
+                case COMPOUND:
+                    return (NBTCompound) object;
+                default:
+                    return (NBT) object;
+            }
+            throw new IllegalArgumentException("Unable to convert argument: " + object + " to NBT base of type: " + type + "!");
+        } catch (Throwable ex) {
+            throw new IllegalArgumentException("Unable to convert argument: " + object + " to NBT base of type: " + type + "!", ex);
+        }
+    }
+
+    @Override
+    public NBTCompound getNBT(Entity entity) {
+        NBTTagCompound compound = new NBTTagCompound();
+        return ((CraftEntity) entity).getHandle().save(compound);
+    }
+
+    @Override
+    public NBTCompound getNBT(org.bukkit.inventory.ItemStack itemStack) {
+        NBTTagCompound compound = new NBTTagCompound();
+        return CraftItemStack.asNMSCopy(itemStack).save(compound);
+    }
+
+    @Override
+    public NBTCompound getTagCompound(ItemStack itemStack) {
+        return CraftItemStack.asNMSCopy(itemStack).getOrCreateTag();
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d6c605d5c324c790d63b400ef1015599ff5de174..5d19a2389894fbd99c133cfbbc1ac8ba27aba57b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -48,6 +48,7 @@ import java.util.logging.Logger;
 import javax.imageio.ImageIO;
 //import jline.console.ConsoleReader; // Paper
 import mx.kenzie.server.CraftBridge;
+import mx.kenzie.server.nbt.NBTFactoryImplementation;
 import mx.kenzie.server.potion.PotionBuilderImpl;
 import mx.kenzie.wellspring.Wellspring;
 import mx.kenzie.wellspring.nbt.NBT;
@@ -251,7 +252,7 @@ public final class CraftServer implements Server, Wellspring { // Kenzie - Secon
 
         Bukkit.setServer(this);
 
-        nbtFactory = new NBTFactoryImpl(); // Kenzie
+        nbtFactory = new NBTFactoryImplementation(); // Kenzie
 
         // Register all the Enchantments and PotionTypes now so we can stop new registration immediately after
         Enchantments.DAMAGE_ALL.getClass();
@@ -2383,96 +2384,6 @@ public final class CraftServer implements Server, Wellspring { // Kenzie - Secon
         return packetFactory;
     }
 
-    static class NBTFactoryImpl extends NBTFactory {
-
-        @Override
-        public NBTCompound parse(String string) throws IllegalArgumentException {
-            try {
-                return MojangsonParser.parse(string);
-            } catch (Throwable ex) {
-                throw new IllegalArgumentException("NBT compound could not be parsed!", ex);
-            }
-        }
-
-        @Override
-        public NBTCompound newCompound() {
-            return new NBTTagCompound();
-        }
-
-        @Override
-        public mx.kenzie.wellspring.nbt.NBTList newList() {
-            return new NBTTagList();
-        }
-
-        @Override
-        public NBT newBase(Object object, NBT.Type type) {
-            try {
-                switch (type) {
-                    case BOOLEAN:
-                        return NBTTagByte.a((Boolean) object);
-                    case BYTE:
-                        return NBTTagByte.a((Byte) object);
-                    case INT:
-                        return NBTTagInt.a((Integer) object);
-                    case SHORT:
-                        return NBTTagShort.a((Short) object);
-                    case LONG:
-                        return NBTTagLong.a((Long) object);
-                    case FLOAT:
-                        return NBTTagFloat.a((Float) object);
-                    case DOUBLE:
-                        return NBTTagDouble.a((Double) object);
-                    case BYTE_ARRAY:
-                        if (object instanceof byte[])
-                            return new NBTTagByteArray((byte[]) object);
-                        else if (object instanceof List)
-                            return new NBTTagByteArray((List<Byte>) object);
-                        break;
-                    case INT_ARRAY:
-                        if (object instanceof int[])
-                            return new NBTTagIntArray((int[]) object);
-                        else if (object instanceof List)
-                            return new NBTTagIntArray((List<Integer>) object);
-                        break;
-                    case LONG_ARRAY:
-                        if (object instanceof long[])
-                            return new NBTTagLongArray((long[]) object);
-                        else if (object instanceof List)
-                            return new NBTTagLongArray((List<Long>) object);
-                        break;
-                    case STRING:
-                        return NBTTagString.a((String) object);
-                    case LIST:
-                        return (NBTList) object;
-                    case COMPOUND:
-                        return (NBTCompound) object;
-                    default:
-                        return (NBT) object;
-                }
-                throw new IllegalArgumentException("Unable to convert argument: " + object + " to NBT base of type: " + type + "!");
-            } catch (Throwable ex) {
-                throw new IllegalArgumentException("Unable to convert argument: " + object + " to NBT base of type: " + type + "!", ex);
-            }
-        }
-
-        @Override
-        public NBTCompound getNBT(Entity entity) {
-            NBTTagCompound compound = new NBTTagCompound();
-            return ((CraftEntity) entity).getHandle().save(compound);
-        }
-
-        @Override
-        public NBTCompound getNBT(ItemStack itemStack) {
-            NBTTagCompound compound = new NBTTagCompound();
-            return CraftItemStack.asNMSCopy(itemStack).save(compound);
-        }
-
-        @Override
-        public NBTCompound getTagCompound(ItemStack itemStack) {
-            return CraftItemStack.asNMSCopy(itemStack).getOrCreateTag();
-        }
-    }
-
     @Override
     public PotionBuilder createPotionEffect(NamespacedKey key, String name) {
         return new PotionBuilderImpl(key, name);
