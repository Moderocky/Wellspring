From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Moderocky <admin@moderocky.com>
Date: Sun, 6 Sep 2020 12:47:25 +0100
Subject: [PATCH] New plugin-linked attachment system.


diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 81df71b7e165b8702575176550a587cdb8744beb..15e91aca1707d3c6398c4348d9f30d9486f826d0 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -705,6 +705,7 @@ public class EntityArmorStand extends EntityLiving {
     public void killEntity() {
         org.bukkit.event.entity.EntityDeathEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityDeathEvent(this, drops); // CraftBukkit - call event // Paper - make cancellable
         if (event.isCancelled()) return; // Paper - make cancellable
+        getBukkitEntity().attachments.dispose(); // Kenzie - dispose of attachments
         this.die();
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index c622fb7044f9988a125af48784e239353a6d27d2..5533564e45cbdc8fd3412d9e4555a753e8ffffc7 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -1489,6 +1489,8 @@ public abstract class EntityLiving extends Entity {
         }
         // CraftBukkit start - Call death event
         org.bukkit.event.entity.EntityDeathEvent deathEvent = CraftEventFactory.callEntityDeathEvent(this, this.drops); // Paper
+        if (!deathEvent.isCancelled())
+            this.getBukkitEntity().attachments.dispose(); // Kenzie - dispose of attachments
         this.postDeathDropItems(deathEvent); // Paper
         this.drops = new ArrayList<>();
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 8b1e866b3e0362d3a391586bbf14702dc25b8c00..68cdadd50da2373680c8afa2c70d9544c3f22bb8 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -674,6 +674,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 this.setHealth((float) event.getReviveHealth());
             }
             return;
+        } else {
+            this.getBukkitEntity().attachments.dispose(); // Kenzie - dispose of attachments
         }
         // Paper end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 77a04097b7f9a67713d2138b38abb857f2ef85ac..73eb5fda470dc3524727dfde080fe4b4e7893e00 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -106,6 +106,7 @@ import org.bukkit.Warning.WarningState;
 import org.bukkit.World;
 import org.bukkit.World.Environment;
 import org.bukkit.WorldCreator;
+import org.bukkit.attachment.Attachable;
 import org.bukkit.attachment.Attachment;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.boss.BarColor;
@@ -123,6 +124,7 @@ import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.conversations.Conversable;
+import org.bukkit.craftbukkit.attachment.AttachmentFactory;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.boss.CraftBossBar;
 import org.bukkit.craftbukkit.boss.CraftKeyedBossbar;
@@ -255,7 +257,7 @@ public final class CraftServer implements Server {
     private final List<CraftPlayer> playerView;
     public int reloadCount;
     public static Exception excessiveVelEx; // Paper - Velocity warnings
-    private final Map<EntityType, Set<java.util.function.Function<Entity, Attachment<?>>>> attachmentRegistrationMap; // Kenzie
+    public final AttachmentFactory attachmentFactory = new AttachmentFactory(this);
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
@@ -275,8 +277,6 @@ public final class CraftServer implements Server {
 
         Bukkit.setServer(this);
 
-        attachmentRegistrationMap = new HashMap<>();
-
         // Register all the Enchantments and PotionTypes now so we can stop new registration immediately after
         Enchantments.DAMAGE_ALL.getClass();
         org.bukkit.enchantments.Enchantment.stopAcceptingRegistrations();
@@ -2367,24 +2367,24 @@ public final class CraftServer implements Server {
         return mobGoals;
     }
 
+    // Kenzie start - attachments
     @Override
-    public void registerAttachment(java.util.function.Function<Entity, Attachment<?>> creatorFunction, EntityType... types) {
+    public void registerAttachment(Plugin plugin, java.util.function.Function<Entity, Attachment<?>> creatorFunction, EntityType... types) {
         for (EntityType type : types) {
-            final Set<java.util.function.Function<Entity, Attachment<?>>> set;
-            if (attachmentRegistrationMap.containsKey(type)) {
-                set = attachmentRegistrationMap.get(type);
-                set.add(creatorFunction);
-            } else {
-                set = new HashSet<>();
-                set.add(creatorFunction);
-                attachmentRegistrationMap.put(type, set);
-            }
+            registerAttachment(plugin, creatorFunction, type.getEntityClass());
         }
     }
 
-    public Set<java.util.function.Function<Entity, Attachment<?>>> getAttachments(EntityType type) {
-        return attachmentRegistrationMap.getOrDefault(type, new HashSet<>());
+    @Override
+    public void registerAttachment(Plugin plugin, java.util.function.Function<? extends Attachable, Attachment<?>> creatorFunction, Class<? extends Attachable> target) {
+        attachmentFactory.registerAttachment(plugin, target, (java.util.function.Function<Attachable, Attachment<?>>) creatorFunction);
+    }
+
+    @Override
+    public void unregisterAttachments(Plugin plugin) {
+        attachmentFactory.removeAll(plugin);
     }
+    // Kenzie end
 
     // Paper end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/attachment/AttachmentFactory.java b/src/main/java/org/bukkit/craftbukkit/attachment/AttachmentFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..7d88743ea0f9cc910231da4dae9d7d7fb4947de8
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/attachment/AttachmentFactory.java
@@ -0,0 +1,107 @@
+package org.bukkit.craftbukkit.attachment;
+
+import org.bukkit.Bukkit;
+import org.bukkit.attachment.Attachable;
+import org.bukkit.attachment.Attachment;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.entity.Entity;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.java.JavaPlugin;
+
+import java.lang.ref.WeakReference;
+import java.util.*;
+import java.util.function.Function;
+
+public class AttachmentFactory {
+
+    private final CraftServer server;
+    private final Map<Plugin, Map<Class<? extends Attachable>, Set<Function<Attachable, Attachment<?>>>>> factoryMethods;
+    private final Set<WeakReference<AttachmentHolder>> holders;
+
+    public AttachmentFactory(CraftServer server) {
+        this.server = server;
+        this.holders = new HashSet<>();
+        this.factoryMethods = new HashMap<>();
+    }
+
+    protected void registerAttachmentHolder(AttachmentHolder holder) {
+        holders.add(new WeakReference<>(holder));
+    }
+
+    public void registerAttachment(Plugin plugin, Class<? extends Attachable> target, Function<Attachable, Attachment<?>> provider) {
+        final Map<Class<? extends Attachable>, Set<Function<Attachable, Attachment<?>>>> factories;
+        if (factoryMethods.containsKey(plugin)) {
+            factories = factoryMethods.get(plugin);
+            final Set<java.util.function.Function<Attachable, Attachment<?>>> set;
+            if (factories.containsKey(target)) {
+                set = factories.get(target);
+                set.add(provider);
+            } else {
+                set = new HashSet<>();
+                set.add(provider);
+                factories.put(target, set);
+            }
+        } else {
+            factories = new HashMap<>();
+            final Set<java.util.function.Function<Attachable, Attachment<?>>> set;
+            set = new HashSet<>();
+            set.add(provider);
+            factories.put(target, set);
+            factoryMethods.put(plugin, factories);
+        }
+    }
+
+    public <T extends Attachable> AttachmentHolder createAttachments(T target) {
+        AttachmentHolder holder = new AttachmentHolder();
+        addAttachments(target, holder);
+        return holder;
+    }
+    
+    public <T extends Attachable> void addAttachments(T target, AttachmentHolder holder) {
+        Set<Function<Attachable, Attachment<?>>> providers = getAttachmentProviders(target.getClass());
+        for (Function<Attachable, Attachment<?>> provider : providers) {
+            try {
+                Attachment<? super T> attachment = (Attachment<? super T>) provider.apply(target);
+                holder.add(attachment);
+            } catch (Throwable throwable) {
+                throwable.printStackTrace();
+            }
+        }
+    }
+
+    public Set<Function<Attachable, Attachment<?>>> getAttachmentProviders(Class<? extends Attachable> target) {
+        Set<Function<Attachable, Attachment<?>>> providers = new HashSet<>();
+        for (Map<Class<? extends Attachable>, Set<Function<Attachable, Attachment<?>>>> map : factoryMethods.values()) {
+            for (Class<? extends Attachable> cls : map.keySet()) {
+                if (!cls.equals(target)) continue;
+                if (!cls.isAssignableFrom(target)) continue;
+                providers.addAll(map.get(cls));
+            }
+        }
+        return providers;
+    }
+
+    public void removeAll(Plugin plugin) {
+        Iterator<WeakReference<AttachmentHolder>> iterator = holders.iterator();
+        while (iterator.hasNext()) {
+            WeakReference<AttachmentHolder> reference = iterator.next();
+            AttachmentHolder holder = reference.get();
+            if (holder == null) {
+                iterator.remove();
+            } else {
+                holder.removeAll(plugin);
+            }
+        }
+    }
+
+    public void disposeOfAll() {
+        for (WeakReference<AttachmentHolder> reference : holders) {
+            AttachmentHolder holder = reference.get();
+            if (holder != null) {
+                holder.dispose();
+            }
+        }
+        holders.clear();
+    }
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/attachment/AttachmentHolder.java b/src/main/java/org/bukkit/craftbukkit/attachment/AttachmentHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..73fc378dedfa5f27f8f27d31d10f1275464a623e
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/attachment/AttachmentHolder.java
@@ -0,0 +1,60 @@
+package org.bukkit.craftbukkit.attachment;
+
+import org.bukkit.attachment.Attachment;
+import org.bukkit.plugin.Plugin;
+
+import java.util.*;
+
+public class AttachmentHolder extends ArrayList<Attachment<?>> {
+
+    protected AttachmentHolder() {
+    }
+
+    public Attachment<?> getByClass(Class<? extends Attachment<?>> cls) {
+        for (Attachment<?> attachment : this) {
+            if (attachment.getClass() == cls) return attachment;
+        }
+        return null;
+    }
+
+    public boolean containsByClass(Class<? extends Attachment<?>> cls) {
+        for (Attachment<?> attachment : this) {
+            if (attachment.getClass() == cls) return true;
+        }
+        return false;
+    }
+
+    public Set<Attachment<?>> getByProvider(Plugin plugin) {
+        Set<Attachment<?>> set = new HashSet<>();
+        for (Attachment<?> attachment : this) {
+            if (attachment.getOwningPlugin() == plugin) set.add(attachment);
+        }
+        return set;
+    }
+
+    public void removeAll(Plugin plugin) {
+        this.removeIf(attachment -> {
+           if (attachment.getOwningPlugin() == plugin) {
+               try {
+                   attachment.onDisposal();
+               } catch (Throwable throwable) {
+                   throwable.printStackTrace();
+               }
+               return true;
+           }
+           return false;
+        });
+    }
+
+    public void dispose() {
+        for (Attachment<?> attachment : this) {
+            try {
+                attachment.onDisposal();
+            } catch (Throwable throwable) {
+                throwable.printStackTrace();
+            }
+        }
+        this.clear();
+    }
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index d9d734a80b721325faaee6671239b9265b24e9d7..2ffd4345fd4986a0c42d503b8698ac286e1fe4e6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -154,6 +154,7 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.block.PistonMoveReaction;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.attachment.AttachmentHolder;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
 import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
@@ -181,31 +182,20 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     protected Entity entity;
     private EntityDamageEvent lastDamageEvent;
     private final CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
-    private final Map<Class<? extends Attachment<?>>, Attachment<?>> attachments; // Kenzie
+    public final AttachmentHolder attachments; // Kenzie
 
     public CraftEntity(final CraftServer server, final Entity entity) {
         this.server = server;
         this.entity = entity;
-        this.attachments = new HashMap<>();
-        for (java.util.function.Function<org.bukkit.entity.Entity, Attachment<?>> function : server.getAttachments(this.getType())) {
-            try {
-                Attachment<?> attachment = function.apply(this);
-                attachments.put((Class<? extends Attachment<?>>) attachment.getClass(), attachment);
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-        }
+        this.attachments = server.attachmentFactory.createAttachments(this); // Kenzie
     }
 
     // Kenzie start - attachment system
-    public <T extends Attachment<?>> void addAttachment(Class<T> cls, T attachment) {
-        attachments.put(cls, attachment);
-    }
 
     @Override
     @SuppressWarnings("unchecked")
     public <T extends Attachment<?>> T getAttachment(Class<T> attachmentClass) {
-        T attachment = (T) attachments.get(attachmentClass); // This cast is fine
+        T attachment = (T) attachments.getByClass(attachmentClass); // This cast is fine
         if (attachment == null) {
             throw new NullPointerException("No attachment for this class has been registered.");
         }
@@ -214,7 +204,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public <T extends Attachment<?>> boolean hasAttachment(Class<T> attachmentClass) {
-        return attachments.containsKey(attachmentClass);
+        return attachments.containsByClass(attachmentClass);
     }
     // Kenzie end
 
@@ -632,6 +622,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public void remove() {
+        attachments.dispose(); // Kenzie - attachment disposal
         entity.die();
     }
 
