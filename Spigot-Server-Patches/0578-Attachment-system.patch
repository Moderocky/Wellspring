From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Moderocky <admin@moderocky.com>
Date: Sat, 5 Sep 2020 09:31:45 +0100
Subject: [PATCH] Attachment system.


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5f5b39b3b7e56e935d1f964fbfc3385a65b7e178..b0bee177f386551018fc14ef01c7fdd40bc88f22 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -27,21 +27,7 @@ import java.io.IOException;
 import java.io.InputStreamReader;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Base64;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Properties;
-import java.util.Random;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.function.Consumer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -120,6 +106,7 @@ import org.bukkit.Warning.WarningState;
 import org.bukkit.World;
 import org.bukkit.World.Environment;
 import org.bukkit.WorldCreator;
+import org.bukkit.attachment.Attachment;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.boss.BarColor;
 import org.bukkit.boss.BarFlag;
@@ -176,6 +163,7 @@ import org.bukkit.craftbukkit.util.DatFileFilter;
 import org.bukkit.craftbukkit.util.Versioning;
 import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Player;
 import org.bukkit.event.command.UnknownCommandEvent; // Paper
 import org.bukkit.event.inventory.InventoryType;
@@ -267,6 +255,7 @@ public final class CraftServer implements Server {
     private final List<CraftPlayer> playerView;
     public int reloadCount;
     public static Exception excessiveVelEx; // Paper - Velocity warnings
+    private final Map<EntityType, Set<java.util.function.Function<Entity, Attachment<?>>>> attachmentRegistrationMap; // Kenzie
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
@@ -286,6 +275,8 @@ public final class CraftServer implements Server {
 
         Bukkit.setServer(this);
 
+        attachmentRegistrationMap = new HashMap<>();
+
         // Register all the Enchantments and PotionTypes now so we can stop new registration immediately after
         Enchantments.DAMAGE_ALL.getClass();
         org.bukkit.enchantments.Enchantment.stopAcceptingRegistrations();
@@ -2375,5 +2366,26 @@ public final class CraftServer implements Server {
     public com.destroystokyo.paper.entity.ai.MobGoals getMobGoals() {
         return mobGoals;
     }
+
+    @Override
+    public void registerAttachment(java.util.function.Function<Entity, Attachment<?>> creatorFunction, EntityType... types) {
+        for (EntityType type : types) {
+            final Set<java.util.function.Function<Entity, Attachment<?>>> set;
+            if (attachmentRegistrationMap.containsKey(type)) {
+                set = attachmentRegistrationMap.get(type);
+                set.add(creatorFunction);
+            } else {
+                set = new HashSet<>();
+                set.add(creatorFunction);
+                attachmentRegistrationMap.put(type, set);
+            }
+        }
+    }
+
+    public Set<java.util.function.Function<Entity, Attachment<?>>> getAttachments(EntityType type) {
+        return attachmentRegistrationMap.getOrDefault(type, new HashSet<>());
+    }
+
     // Paper end
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index b1fdc5737d332c6210d57793468da1eda8f8b9d2..b7ae89f15a78233e5b242ef923313fbd45be1ef3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -3,9 +3,9 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
+
+import java.util.*;
+
 import net.minecraft.server.AxisAlignedBB;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.DamageSource;
@@ -148,6 +148,8 @@ import org.bukkit.EntityEffect;
 import org.bukkit.Location;
 import org.bukkit.Server;
 import org.bukkit.World;
+import org.bukkit.attachment.Attachable;
+import org.bukkit.attachment.Attachment;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.PistonMoveReaction;
 import org.bukkit.craftbukkit.CraftServer;
@@ -179,11 +181,38 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     protected Entity entity;
     private EntityDamageEvent lastDamageEvent;
     private final CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+    private final Map<Class<? extends Attachment<?>>, Attachment<?>> attachments; // Kenzie
 
     public CraftEntity(final CraftServer server, final Entity entity) {
         this.server = server;
         this.entity = entity;
+        this.attachments = new HashMap<>();
+        for (java.util.function.Function<org.bukkit.entity.Entity, Attachment<?>> function : server.getAttachments(this.getType())) {
+            try {
+                Attachment<?> attachment = function.apply(this);
+                attachments.put((Class<? extends Attachment<?>>) attachment.getClass(), attachment);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    // Kenzie start - attachment system
+    public <T extends Attachment<?>> void addAttachment(Class<T> cls, T attachment) {
+        attachments.put(cls, attachment);
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public <T extends Attachment<?>> T getAttachment(Class<T> attachmentClass) {
+        return (T) attachments.get(attachmentClass); // This cast is fine
+    }
+
+    @Override
+    public <T extends Attachment<?>> boolean hasAttachment(Class<T> attachmentClass) {
+        return attachments.containsKey(attachmentClass);
     }
+    // Kenzie end
 
     @Override
     public Chunk getChunk() {
