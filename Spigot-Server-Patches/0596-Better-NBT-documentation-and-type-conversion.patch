From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Moderocky <admin@moderocky.com>
Date: Mon, 7 Sep 2020 11:10:47 +0100
Subject: [PATCH] Better NBT documentation and type conversion.


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ad3310f18d69c397f1f2592d4f087ddf224c0184..3d0888173f43f6e9d9623ba5660e702391604de9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -33,6 +33,7 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.imageio.ImageIO;
 //import jline.console.ConsoleReader; // Paper
+import mx.kenzie.wellspring.nbt.NBT;
 import mx.kenzie.wellspring.nbt.NBTCompound;
 import mx.kenzie.wellspring.nbt.NBTFactory;
 import mx.kenzie.wellspring.nbt.NBTList;
@@ -2366,6 +2367,57 @@ public final class CraftServer implements Server {
             return new NBTTagList();
         }
 
+        @Override
+        public NBT newBase(Object object, NBT.Type type) {
+            try {
+                switch (type) {
+                    case BOOLEAN:
+                        return NBTTagByte.a((Boolean) object);
+                    case BYTE:
+                        return NBTTagByte.a((Byte) object);
+                    case INT:
+                        return NBTTagInt.a((Integer) object);
+                    case SHORT:
+                        return NBTTagShort.a((Short) object);
+                    case LONG:
+                        return NBTTagLong.a((Long) object);
+                    case FLOAT:
+                        return NBTTagFloat.a((Float) object);
+                    case DOUBLE:
+                        return NBTTagDouble.a((Double) object);
+                    case BYTE_ARRAY:
+                        if (object instanceof byte[])
+                            return new NBTTagByteArray((byte[]) object);
+                        else if (object instanceof List)
+                            return new NBTTagByteArray((List<Byte>) object);
+                        break;
+                    case INT_ARRAY:
+                        if (object instanceof int[])
+                            return new NBTTagIntArray((int[]) object);
+                        else if (object instanceof List)
+                            return new NBTTagIntArray((List<Integer>) object);
+                        break;
+                    case LONG_ARRAY:
+                        if (object instanceof long[])
+                            return new NBTTagLongArray((long[]) object);
+                        else if (object instanceof List)
+                            return new NBTTagLongArray((List<Long>) object);
+                        break;
+                    case STRING:
+                        return NBTTagString.a((String) object);
+                    case LIST:
+                        return (NBTList) object;
+                    case COMPOUND:
+                        return (NBTCompound) object;
+                    default:
+                        return (NBT) object;
+                }
+                throw new IllegalArgumentException("Unable to convert argument: " + object + " to NBT base of type: " + type + "!");
+            } catch (Throwable ex) {
+                throw new IllegalArgumentException("Unable to convert argument: " + object + " to NBT base of type: " + type + "!", ex);
+            }
+        }
+
         @Override
         public NBTCompound getNBT(Entity entity) {
             NBTTagCompound compound = new NBTTagCompound();
