From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Moderocky <admin@moderocky.com>
Date: Fri, 11 Sep 2020 09:16:21 +0100
Subject: [PATCH] Packet type identifier methods.


diff --git a/src/main/java/org/bukkit/craftbukkit/packet/PacketFactoryImpl.java b/src/main/java/org/bukkit/craftbukkit/packet/PacketFactoryImpl.java
index ad4168bb15b514d4edad31e9b85153762864d34e..b20ffe164d6b130ff3e6e0150e7a92fce14d97b6 100644
--- a/src/main/java/org/bukkit/craftbukkit/packet/PacketFactoryImpl.java
+++ b/src/main/java/org/bukkit/craftbukkit/packet/PacketFactoryImpl.java
@@ -20,12 +20,15 @@ import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftContainer;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.inventory.*;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
 import org.bukkit.inventory.*;
 import org.bukkit.inventory.FurnaceRecipe;
 
+import javax.annotation.Nonnull;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Modifier;
@@ -37,144 +40,144 @@ public class PacketFactoryImpl extends PacketFactory {
 
     static {
         incoming: {
-            Incoming.LOGIN_CUSTOM_PAYLOAD = new Incoming(PacketLoginInCustomPayload::new);
-            Incoming.ABILITIES = new Incoming(PacketPlayInAbilities::new);
-            Incoming.ADVANCEMENTS = new Incoming(PacketPlayInAdvancements::new);
-            Incoming.ARM_ANIMATION = new Incoming(PacketPlayInArmAnimation::new);
-            Incoming.AUTO_RECIPE = new Incoming(PacketPlayInAutoRecipe::new);
-            Incoming.BEACON = new Incoming(PacketPlayInBeacon::new);
-            Incoming.BOOK_EDIT = new Incoming(PacketPlayInBEdit::new);
-            Incoming.BLOCK_DIG = new Incoming(PacketPlayInBlockDig::new);
-            Incoming.BLOCK_PLACE = new Incoming(PacketPlayInBlockPlace::new);
-            Incoming.BOAT_MOVE = new Incoming(PacketPlayInBoatMove::new);
-            Incoming.CHAT = new Incoming(PacketPlayInChat::new);
-            Incoming.CLIENT_COMMAND = new Incoming(PacketPlayInClientCommand::new);
-            Incoming.CLOSE_WINDOW = new Incoming(PacketPlayInCloseWindow::new);
-            Incoming.CUSTOM_PAYLOAD = new Incoming(PacketPlayInCustomPayload::new);
-            Incoming.DIFFICULTY_CHANGE = new Incoming(PacketPlayInDifficultyChange::new);
-            Incoming.DIFFICULTY_LOCK = new Incoming(PacketPlayInDifficultyLock::new);
-            Incoming.ENCHANT_ITEM = new Incoming(PacketPlayInEnchantItem::new);
-            Incoming.ENTITY_ACTION = new Incoming(PacketPlayInEntityAction::new);
-            Incoming.ENTITY_NBT_QUERY = new Incoming(PacketPlayInEntityNBTQuery::new);
-            Incoming.FLYING = new Incoming(PacketPlayInFlying::new);
-            Incoming.HELD_ITEM_SLOT = new Incoming(PacketPlayInHeldItemSlot::new);
-            Incoming.ITEM_NAME = new Incoming(PacketPlayInItemName::new);
-            Incoming.JIGSAW_GENERATE = new Incoming(PacketPlayInJigsawGenerate::new);
-            Incoming.KEEP_ALIVE = new Incoming(PacketPlayInKeepAlive::new);
-            Incoming.PICK_ITEM = new Incoming(PacketPlayInPickItem::new);
-            Incoming.RECIPE_DISPLAYED = new Incoming(PacketPlayInRecipeDisplayed::new);
-            Incoming.RESOURCE_PACK_STATUS = new Incoming(PacketPlayInResourcePackStatus::new);
-            Incoming.SET_COMMAND_BLOCK = new Incoming(PacketPlayInSetCommandBlock::new);
-            Incoming.SET_COMMAND_MINECART = new Incoming(PacketPlayInSetCommandMinecart::new);
-            Incoming.SET_CREATIVE_SLOT = new Incoming(PacketPlayInSetCreativeSlot::new);
-            Incoming.SET_JIGSAW = new Incoming(PacketPlayInSetJigsaw::new);
-            Incoming.SETTINGS = new Incoming(PacketPlayInSettings::new);
-            Incoming.SPECTATE = new Incoming(PacketPlayInSpectate::new);
-            Incoming.STEER_VEHICLE = new Incoming(PacketPlayInSteerVehicle::new);
-            Incoming.STRUCTURE = new Incoming(PacketPlayInStruct::new);
-            Incoming.TAB_COMPLETE = new Incoming(PacketPlayInTabComplete::new);
-            Incoming.TELEPORT_ACCEPT = new Incoming(PacketPlayInTeleportAccept::new);
-            Incoming.TILE_NBT_QUERY = new Incoming(PacketPlayInTileNBTQuery::new);
-            Incoming.TRANSACTION = new Incoming(PacketPlayInTransaction::new);
-            Incoming.TRADE_SELECT = new Incoming(PacketPlayInTrSel::new);
-            Incoming.UPDATE_SIGN = new Incoming(PacketPlayInUpdateSign::new);
-            Incoming.USE_ENTITY = new Incoming(PacketPlayInUseEntity::new);
-            Incoming.USE_ITEM = new Incoming(PacketPlayInUseItem::new);
-            Incoming.VEHICLE_MOVE = new Incoming(PacketPlayInVehicleMove::new);
-            Incoming.WINDOW_CLICK = new Incoming(PacketPlayInWindowClick::new);
+            Incoming.LOGIN_CUSTOM_PAYLOAD = new Incoming(PacketLoginInCustomPayload.class, PacketLoginInCustomPayload::new);
+            Incoming.ABILITIES = new Incoming(PacketPlayInAbilities.class, PacketPlayInAbilities::new);
+            Incoming.ADVANCEMENTS = new Incoming(PacketPlayInAdvancements.class, PacketPlayInAdvancements::new);
+            Incoming.ARM_ANIMATION = new Incoming(PacketPlayInArmAnimation.class, PacketPlayInArmAnimation::new);
+            Incoming.AUTO_RECIPE = new Incoming(PacketPlayInAutoRecipe.class, PacketPlayInAutoRecipe::new);
+            Incoming.BEACON = new Incoming(PacketPlayInBeacon.class, PacketPlayInBeacon::new);
+            Incoming.BOOK_EDIT = new Incoming(PacketPlayInBEdit.class, PacketPlayInBEdit::new);
+            Incoming.BLOCK_DIG = new Incoming(PacketPlayInBlockDig.class, PacketPlayInBlockDig::new);
+            Incoming.BLOCK_PLACE = new Incoming(PacketPlayInBlockPlace.class, PacketPlayInBlockPlace::new);
+            Incoming.BOAT_MOVE = new Incoming(PacketPlayInBoatMove.class, PacketPlayInBoatMove::new);
+            Incoming.CHAT = new Incoming(PacketPlayInChat.class, PacketPlayInChat::new);
+            Incoming.CLIENT_COMMAND = new Incoming(PacketPlayInClientCommand.class, PacketPlayInClientCommand::new);
+            Incoming.CLOSE_WINDOW = new Incoming(PacketPlayInCloseWindow.class, PacketPlayInCloseWindow::new);
+            Incoming.CUSTOM_PAYLOAD = new Incoming(PacketPlayInCustomPayload.class, PacketPlayInCustomPayload::new);
+            Incoming.DIFFICULTY_CHANGE = new Incoming(PacketPlayInDifficultyChange.class, PacketPlayInDifficultyChange::new);
+            Incoming.DIFFICULTY_LOCK = new Incoming(PacketPlayInDifficultyLock.class, PacketPlayInDifficultyLock::new);
+            Incoming.ENCHANT_ITEM = new Incoming(PacketPlayInEnchantItem.class, PacketPlayInEnchantItem::new);
+            Incoming.ENTITY_ACTION = new Incoming(PacketPlayInEntityAction.class, PacketPlayInEntityAction::new);
+            Incoming.ENTITY_NBT_QUERY = new Incoming(PacketPlayInEntityNBTQuery.class, PacketPlayInEntityNBTQuery::new);
+            Incoming.FLYING = new Incoming(PacketPlayInFlying.class, PacketPlayInFlying::new);
+            Incoming.HELD_ITEM_SLOT = new Incoming(PacketPlayInHeldItemSlot.class, PacketPlayInHeldItemSlot::new);
+            Incoming.ITEM_NAME = new Incoming(PacketPlayInItemName.class, PacketPlayInItemName::new);
+            Incoming.JIGSAW_GENERATE = new Incoming(PacketPlayInJigsawGenerate.class, PacketPlayInJigsawGenerate::new);
+            Incoming.KEEP_ALIVE = new Incoming(PacketPlayInKeepAlive.class, PacketPlayInKeepAlive::new);
+            Incoming.PICK_ITEM = new Incoming(PacketPlayInPickItem.class, PacketPlayInPickItem::new);
+            Incoming.RECIPE_DISPLAYED = new Incoming(PacketPlayInRecipeDisplayed.class, PacketPlayInRecipeDisplayed::new);
+            Incoming.RESOURCE_PACK_STATUS = new Incoming(PacketPlayInResourcePackStatus.class, PacketPlayInResourcePackStatus::new);
+            Incoming.SET_COMMAND_BLOCK = new Incoming(PacketPlayInSetCommandBlock.class, PacketPlayInSetCommandBlock::new);
+            Incoming.SET_COMMAND_MINECART = new Incoming(PacketPlayInSetCommandMinecart.class, PacketPlayInSetCommandMinecart::new);
+            Incoming.SET_CREATIVE_SLOT = new Incoming(PacketPlayInSetCreativeSlot.class, PacketPlayInSetCreativeSlot::new);
+            Incoming.SET_JIGSAW = new Incoming(PacketPlayInSetJigsaw.class, PacketPlayInSetJigsaw::new);
+            Incoming.SETTINGS = new Incoming(PacketPlayInSettings.class, PacketPlayInSettings::new);
+            Incoming.SPECTATE = new Incoming(PacketPlayInSpectate.class, PacketPlayInSpectate::new);
+            Incoming.STEER_VEHICLE = new Incoming(PacketPlayInSteerVehicle.class, PacketPlayInSteerVehicle::new);
+            Incoming.STRUCTURE = new Incoming(PacketPlayInStruct.class, PacketPlayInStruct::new);
+            Incoming.TAB_COMPLETE = new Incoming(PacketPlayInTabComplete.class, PacketPlayInTabComplete::new);
+            Incoming.TELEPORT_ACCEPT = new Incoming(PacketPlayInTeleportAccept.class, PacketPlayInTeleportAccept::new);
+            Incoming.TILE_NBT_QUERY = new Incoming(PacketPlayInTileNBTQuery.class, PacketPlayInTileNBTQuery::new);
+            Incoming.TRANSACTION = new Incoming(PacketPlayInTransaction.class, PacketPlayInTransaction::new);
+            Incoming.TRADE_SELECT = new Incoming(PacketPlayInTrSel.class, PacketPlayInTrSel::new);
+            Incoming.UPDATE_SIGN = new Incoming(PacketPlayInUpdateSign.class, PacketPlayInUpdateSign::new);
+            Incoming.USE_ENTITY = new Incoming(PacketPlayInUseEntity.class, PacketPlayInUseEntity::new);
+            Incoming.USE_ITEM = new Incoming(PacketPlayInUseItem.class, PacketPlayInUseItem::new);
+            Incoming.VEHICLE_MOVE = new Incoming(PacketPlayInVehicleMove.class, PacketPlayInVehicleMove::new);
+            Incoming.WINDOW_CLICK = new Incoming(PacketPlayInWindowClick.class, PacketPlayInWindowClick::new);
         }
         outgoing: {
-            Outgoing.LOGIN_CUSTOM_PAYLOAD = new PacketType.Outgoing(PacketLoginOutCustomPayload::new);
-            Outgoing.ABILITIES = new PacketType.Outgoing(PacketPlayOutAbilities::new);
-            Outgoing.ADVANCEMENTS = new PacketType.Outgoing(PacketPlayOutAdvancements::new);
-            Outgoing.ANIMATION = new PacketType.Outgoing(PacketPlayOutAnimation::new);
-            Outgoing.ATTACH_ENTITY = new PacketType.Outgoing(PacketPlayOutAttachEntity::new);
-            Outgoing.AUTO_RECIPE = new PacketType.Outgoing(PacketPlayOutAutoRecipe::new);
-            Outgoing.BLOCK_ACTION = new PacketType.Outgoing(PacketPlayOutBlockAction::new);
-            Outgoing.BLOCK_BREAK = new PacketType.Outgoing(PacketPlayOutBlockBreak::new);
-            Outgoing.BLOCK_BREAK_ANIMATION = new PacketType.Outgoing(PacketPlayOutBlockBreakAnimation::new);
-            Outgoing.BLOCK_CHANGE = new PacketType.Outgoing(PacketPlayOutBlockChange::new);
-            Outgoing.BOSS = new PacketType.Outgoing(PacketPlayOutBoss::new);
-            Outgoing.CAMERA = new PacketType.Outgoing(PacketPlayOutCamera::new);
-            Outgoing.CHAT = new PacketType.Outgoing(PacketPlayOutChat::new);
-            Outgoing.CLOSE_WINDOW = new PacketType.Outgoing(PacketPlayOutCloseWindow::new);
-            Outgoing.COLLECT = new PacketType.Outgoing(PacketPlayOutCollect::new);
-            Outgoing.COMBAT_EVENT = new PacketType.Outgoing(PacketPlayOutCombatEvent::new);
-            Outgoing.COMMANDS = new PacketType.Outgoing(PacketPlayOutCommands::new);
-            Outgoing.CUSTOM_PAYLOAD = new PacketType.Outgoing(PacketPlayOutCustomPayload::new);
-            Outgoing.CUSTOM_SOUND_EFFECT = new PacketType.Outgoing(PacketPlayOutCustomSoundEffect::new);
-            Outgoing.ENTITY = new PacketType.Outgoing(PacketPlayOutEntity::new);
-            Outgoing.ENTITY_DESTROY = new PacketType.Outgoing(PacketPlayOutEntityDestroy::new);
-            Outgoing.ENTITY_EFFECT = new PacketType.Outgoing(PacketPlayOutEntityEffect::new);
-            Outgoing.ENTITY_EQUIPMENT = new PacketType.Outgoing(PacketPlayOutEntityEquipment::new);
-            Outgoing.ENTITY_HEAD_ROTATION = new PacketType.Outgoing(PacketPlayOutEntityHeadRotation::new);
-            Outgoing.ENTITY_METADATA = new PacketType.Outgoing(PacketPlayOutEntityMetadata::new);
-            Outgoing.ENTITY_SOUND = new PacketType.Outgoing(PacketPlayOutEntitySound::new);
-            Outgoing.ENTITY_STATUS = new PacketType.Outgoing(PacketPlayOutEntityStatus::new);
-            Outgoing.ENTITY_TELEPORT = new PacketType.Outgoing(PacketPlayOutEntityTeleport::new);
-            Outgoing.ENTITY_VELOCITY = new PacketType.Outgoing(PacketPlayOutEntityVelocity::new);
-            Outgoing.ENTITY_LOOK = new PacketType.Outgoing(PacketPlayOutEntity.PacketPlayOutEntityLook::new);
-            Outgoing.EXPERIENCE = new PacketType.Outgoing(PacketPlayOutExperience::new);
-            Outgoing.EXPLOSION = new PacketType.Outgoing(PacketPlayOutExplosion::new);
-            Outgoing.GAME_STATE_CHANGE = new PacketType.Outgoing(PacketPlayOutGameStateChange::new);
-            Outgoing.HELD_ITEM_SLOT = new PacketType.Outgoing(PacketPlayOutHeldItemSlot::new);
-            Outgoing.KEEP_ALIVE = new PacketType.Outgoing(PacketPlayOutKeepAlive::new);
-            Outgoing.KICK_DISCONNECT = new PacketType.Outgoing(PacketPlayOutKickDisconnect::new);
-            Outgoing.LIGHT_UPDATE = new PacketType.Outgoing(PacketPlayOutLightUpdate::new);
-            Outgoing.LOGIN = new PacketType.Outgoing(PacketPlayOutLogin::new);
-            Outgoing.LOOK_AT = new PacketType.Outgoing(PacketPlayOutLookAt::new);
-            Outgoing.MAP = new PacketType.Outgoing(PacketPlayOutMap::new);
-            Outgoing.MAP_CHUNK = new PacketType.Outgoing(PacketPlayOutMapChunk::new);
-            Outgoing.MOUNT = new PacketType.Outgoing(PacketPlayOutMount::new);
-            Outgoing.MULTI_BLOCK_CHANGE = new PacketType.Outgoing(PacketPlayOutMultiBlockChange::new);
-            Outgoing.NAMED_ENTITY_SPAWN = new PacketType.Outgoing(PacketPlayOutNamedEntitySpawn::new);
-            Outgoing.NAMED_SOUND_EFFECT = new PacketType.Outgoing(PacketPlayOutNamedSoundEffect::new);
-            Outgoing.NBT_QUERY = new PacketType.Outgoing(PacketPlayOutNBTQuery::new);
-            Outgoing.OPEN_BOOK = new PacketType.Outgoing(PacketPlayOutOpenBook::new);
-            Outgoing.OPEN_SIGN_EDITOR = new PacketType.Outgoing(PacketPlayOutOpenSignEditor::new);
-            Outgoing.OPEN_WINDOW = new PacketType.Outgoing(PacketPlayOutOpenWindow::new);
-            Outgoing.OPEN_WINDOW_HORSE = new PacketType.Outgoing(PacketPlayOutOpenWindowHorse::new);
-            Outgoing.OPEN_WINDOW_MERCHANT = new PacketType.Outgoing(PacketPlayOutOpenWindowMerchant::new);
-            Outgoing.PLAYER_INFO = new PacketType.Outgoing(PacketPlayOutPlayerInfo::new);
-            Outgoing.PLAYER_LIST_HEADER_FOOTER = new PacketType.Outgoing(PacketPlayOutPlayerListHeaderFooter::new);
-            Outgoing.POSITION = new PacketType.Outgoing(PacketPlayOutPosition::new);
-            Outgoing.RECIPES = new PacketType.Outgoing(PacketPlayOutRecipes::new);
-            Outgoing.RECIPE_UPDATE = new PacketType.Outgoing(PacketPlayOutRecipeUpdate::new);
-            Outgoing.REMOVE_ENTITY_EFFECT = new PacketType.Outgoing(PacketPlayOutRemoveEntityEffect::new);
-            Outgoing.RESOURCE_PACK = new PacketType.Outgoing(PacketPlayOutResourcePackSend::new);
-            Outgoing.RESPAWN = new PacketType.Outgoing(PacketPlayOutRespawn::new);
-            Outgoing.SCOREBOARD_DISPLAY_OBJECTIVE = new PacketType.Outgoing(PacketPlayOutScoreboardDisplayObjective::new);
-            Outgoing.SCOREBOARD_OBJECTIVE = new PacketType.Outgoing(PacketPlayOutScoreboardObjective::new);
-            Outgoing.SCOREBOARD_SCORE = new PacketType.Outgoing(PacketPlayOutScoreboardScore::new);
-            Outgoing.SCOREBOARD_TEAM = new PacketType.Outgoing(PacketPlayOutScoreboardTeam::new);
-            Outgoing.SELECT_ADVANCEMENT_TAV = new PacketType.Outgoing(PacketPlayOutSelectAdvancementTab::new);
-            Outgoing.SERVER_DIFFICULTY = new PacketType.Outgoing(PacketPlayOutServerDifficulty::new);
-            Outgoing.SET_COOLDOWN = new PacketType.Outgoing(PacketPlayOutSetCooldown::new);
-            Outgoing.SET_SLOT = new PacketType.Outgoing(PacketPlayOutSetSlot::new);
-            Outgoing.SPAWN_ENTITY = new PacketType.Outgoing(PacketPlayOutSpawnEntity::new);
-            Outgoing.SPAWN_EXPERIENCE = new PacketType.Outgoing(PacketPlayOutSpawnEntityExperienceOrb::new);
-            Outgoing.SPAWN_LIVING_ENTITY = new PacketType.Outgoing(PacketPlayOutSpawnEntityLiving::new);
-            Outgoing.SPAWN_PAINTING = new PacketType.Outgoing(PacketPlayOutSpawnEntityPainting::new);
-            Outgoing.SPAWN_POSITION = new PacketType.Outgoing(PacketPlayOutSpawnPosition::new);
-            Outgoing.STATISTIC = new PacketType.Outgoing(PacketPlayOutStatistic::new);
-            Outgoing.STOP_SOUND = new PacketType.Outgoing(PacketPlayOutStopSound::new);
-            Outgoing.TAB_COMPLETE = new PacketType.Outgoing(PacketPlayOutTabComplete::new);
-            Outgoing.TAGS = new PacketType.Outgoing(PacketPlayOutTags::new);
-            Outgoing.TILE_ENTITY_DATA = new PacketType.Outgoing(PacketPlayOutTileEntityData::new);
-            Outgoing.TITLE = new PacketType.Outgoing(PacketPlayOutTitle::new);
-            Outgoing.TRANSACTION = new PacketType.Outgoing(PacketPlayOutTransaction::new);
-            Outgoing.UNLOAD_CHUNK = new PacketType.Outgoing(PacketPlayOutUnloadChunk::new);
-            Outgoing.UPDATE_ATTRIBUTES = new PacketType.Outgoing(PacketPlayOutUpdateAttributes::new);
-            Outgoing.UPDATE_HEALTH = new PacketType.Outgoing(PacketPlayOutUpdateHealth::new);
-            Outgoing.UPDATE_TIME = new PacketType.Outgoing(PacketPlayOutUpdateTime::new);
-            Outgoing.VEHICLE_MOVE = new PacketType.Outgoing(PacketPlayOutVehicleMove::new);
-            Outgoing.VIEW_CENTRE = new PacketType.Outgoing(PacketPlayOutViewCentre::new);
-            Outgoing.VIEW_DISTANCE = new PacketType.Outgoing(PacketPlayOutViewDistance::new);
-            Outgoing.WINDOW_DATA = new PacketType.Outgoing(PacketPlayOutWindowData::new);
-            Outgoing.WINDOW_ITEMS = new PacketType.Outgoing(PacketPlayOutWindowItems::new);
-            Outgoing.WORLD_BORDER = new PacketType.Outgoing(PacketPlayOutWorldBorder::new);
-            Outgoing.WORLD_EVENT = new PacketType.Outgoing(PacketPlayOutWorldEvent::new);
-            Outgoing.WORLD_PARTICLES = new PacketType.Outgoing(PacketPlayOutWorldParticles::new);
+            Outgoing.LOGIN_CUSTOM_PAYLOAD = new Outgoing(PacketLoginOutCustomPayload.class, PacketLoginOutCustomPayload::new);
+            Outgoing.ABILITIES = new Outgoing(PacketPlayOutAbilities.class, PacketPlayOutAbilities::new);
+            Outgoing.ADVANCEMENTS = new Outgoing(PacketPlayOutAdvancements.class, PacketPlayOutAdvancements::new);
+            Outgoing.ANIMATION = new Outgoing(PacketPlayOutAnimation.class, PacketPlayOutAnimation::new);
+            Outgoing.ATTACH_ENTITY = new Outgoing(PacketPlayOutAttachEntity.class, PacketPlayOutAttachEntity::new);
+            Outgoing.AUTO_RECIPE = new Outgoing(PacketPlayOutAutoRecipe.class, PacketPlayOutAutoRecipe::new);
+            Outgoing.BLOCK_ACTION = new Outgoing(PacketPlayOutBlockAction.class, PacketPlayOutBlockAction::new);
+            Outgoing.BLOCK_BREAK = new Outgoing(PacketPlayOutBlockBreak.class, PacketPlayOutBlockBreak::new);
+            Outgoing.BLOCK_BREAK_ANIMATION = new Outgoing(PacketPlayOutBlockBreakAnimation.class, PacketPlayOutBlockBreakAnimation::new);
+            Outgoing.BLOCK_CHANGE = new Outgoing(PacketPlayOutBlockChange.class, PacketPlayOutBlockChange::new);
+            Outgoing.BOSS = new Outgoing(PacketPlayOutBoss.class, PacketPlayOutBoss::new);
+            Outgoing.CAMERA = new Outgoing(PacketPlayOutCamera.class, PacketPlayOutCamera::new);
+            Outgoing.CHAT = new Outgoing(PacketPlayOutChat.class, PacketPlayOutChat::new);
+            Outgoing.CLOSE_WINDOW = new Outgoing(PacketPlayOutCloseWindow.class, PacketPlayOutCloseWindow::new);
+            Outgoing.COLLECT = new Outgoing(PacketPlayOutCollect.class, PacketPlayOutCollect::new);
+            Outgoing.COMBAT_EVENT = new Outgoing(PacketPlayOutCombatEvent.class, PacketPlayOutCombatEvent::new);
+            Outgoing.COMMANDS = new Outgoing(PacketPlayOutCommands.class, PacketPlayOutCommands::new);
+            Outgoing.CUSTOM_PAYLOAD = new Outgoing(PacketPlayOutCustomPayload.class, PacketPlayOutCustomPayload::new);
+            Outgoing.CUSTOM_SOUND_EFFECT = new Outgoing(PacketPlayOutCustomSoundEffect.class, PacketPlayOutCustomSoundEffect::new);
+            Outgoing.ENTITY = new Outgoing(PacketPlayOutEntity.class, PacketPlayOutEntity::new);
+            Outgoing.ENTITY_DESTROY = new Outgoing(PacketPlayOutEntityDestroy.class, PacketPlayOutEntityDestroy::new);
+            Outgoing.ENTITY_EFFECT = new Outgoing(PacketPlayOutEntityEffect.class, PacketPlayOutEntityEffect::new);
+            Outgoing.ENTITY_EQUIPMENT = new Outgoing(PacketPlayOutEntityEquipment.class, PacketPlayOutEntityEquipment::new);
+            Outgoing.ENTITY_HEAD_ROTATION = new Outgoing(PacketPlayOutEntityHeadRotation.class, PacketPlayOutEntityHeadRotation::new);
+            Outgoing.ENTITY_METADATA = new Outgoing(PacketPlayOutEntityMetadata.class, PacketPlayOutEntityMetadata::new);
+            Outgoing.ENTITY_SOUND = new Outgoing(PacketPlayOutEntitySound.class, PacketPlayOutEntitySound::new);
+            Outgoing.ENTITY_STATUS = new Outgoing(PacketPlayOutEntityStatus.class, PacketPlayOutEntityStatus::new);
+            Outgoing.ENTITY_TELEPORT = new Outgoing(PacketPlayOutEntityTeleport.class, PacketPlayOutEntityTeleport::new);
+            Outgoing.ENTITY_VELOCITY = new Outgoing(PacketPlayOutEntityVelocity.class, PacketPlayOutEntityVelocity::new);
+            Outgoing.ENTITY_LOOK = new Outgoing(PacketPlayOutEntity.PacketPlayOutEntityLook.class, PacketPlayOutEntity.PacketPlayOutEntityLook::new);
+            Outgoing.EXPERIENCE = new Outgoing(PacketPlayOutExperience.class, PacketPlayOutExperience::new);
+            Outgoing.EXPLOSION = new Outgoing(PacketPlayOutExplosion.class, PacketPlayOutExplosion::new);
+            Outgoing.GAME_STATE_CHANGE = new Outgoing(PacketPlayOutGameStateChange.class, PacketPlayOutGameStateChange::new);
+            Outgoing.HELD_ITEM_SLOT = new Outgoing(PacketPlayOutHeldItemSlot.class, PacketPlayOutHeldItemSlot::new);
+            Outgoing.KEEP_ALIVE = new Outgoing(PacketPlayOutKeepAlive.class, PacketPlayOutKeepAlive::new);
+            Outgoing.KICK_DISCONNECT = new Outgoing(PacketPlayOutKickDisconnect.class, PacketPlayOutKickDisconnect::new);
+            Outgoing.LIGHT_UPDATE = new Outgoing(PacketPlayOutLightUpdate.class, PacketPlayOutLightUpdate::new);
+            Outgoing.LOGIN = new Outgoing(PacketPlayOutLogin.class, PacketPlayOutLogin::new);
+            Outgoing.LOOK_AT = new Outgoing(PacketPlayOutLookAt.class, PacketPlayOutLookAt::new);
+            Outgoing.MAP = new Outgoing(PacketPlayOutMap.class, PacketPlayOutMap::new);
+            Outgoing.MAP_CHUNK = new Outgoing(PacketPlayOutMapChunk.class, PacketPlayOutMapChunk::new);
+            Outgoing.MOUNT = new Outgoing(PacketPlayOutMount.class, PacketPlayOutMount::new);
+            Outgoing.MULTI_BLOCK_CHANGE = new Outgoing(PacketPlayOutMultiBlockChange.class, PacketPlayOutMultiBlockChange::new);
+            Outgoing.NAMED_ENTITY_SPAWN = new Outgoing(PacketPlayOutNamedEntitySpawn.class, PacketPlayOutNamedEntitySpawn::new);
+            Outgoing.NAMED_SOUND_EFFECT = new Outgoing(PacketPlayOutNamedSoundEffect.class, PacketPlayOutNamedSoundEffect::new);
+            Outgoing.NBT_QUERY = new Outgoing(PacketPlayOutNBTQuery.class, PacketPlayOutNBTQuery::new);
+            Outgoing.OPEN_BOOK = new Outgoing(PacketPlayOutOpenBook.class, PacketPlayOutOpenBook::new);
+            Outgoing.OPEN_SIGN_EDITOR = new Outgoing(PacketPlayOutOpenSignEditor.class, PacketPlayOutOpenSignEditor::new);
+            Outgoing.OPEN_WINDOW = new Outgoing(PacketPlayOutOpenWindow.class, PacketPlayOutOpenWindow::new);
+            Outgoing.OPEN_WINDOW_HORSE = new Outgoing(PacketPlayOutOpenWindowHorse.class, PacketPlayOutOpenWindowHorse::new);
+            Outgoing.OPEN_WINDOW_MERCHANT = new Outgoing(PacketPlayOutOpenWindowMerchant.class, PacketPlayOutOpenWindowMerchant::new);
+            Outgoing.PLAYER_INFO = new Outgoing(PacketPlayOutPlayerInfo.class, PacketPlayOutPlayerInfo::new);
+            Outgoing.PLAYER_LIST_HEADER_FOOTER = new Outgoing(PacketPlayOutPlayerListHeaderFooter.class, PacketPlayOutPlayerListHeaderFooter::new);
+            Outgoing.POSITION = new Outgoing(PacketPlayOutPosition.class, PacketPlayOutPosition::new);
+            Outgoing.RECIPES = new Outgoing(PacketPlayOutRecipes.class, PacketPlayOutRecipes::new);
+            Outgoing.RECIPE_UPDATE = new Outgoing(PacketPlayOutRecipeUpdate.class, PacketPlayOutRecipeUpdate::new);
+            Outgoing.REMOVE_ENTITY_EFFECT = new Outgoing(PacketPlayOutRemoveEntityEffect.class, PacketPlayOutRemoveEntityEffect::new);
+            Outgoing.RESOURCE_PACK = new Outgoing(PacketPlayOutResourcePackSend.class, PacketPlayOutResourcePackSend::new);
+            Outgoing.RESPAWN = new Outgoing(PacketPlayOutRespawn.class, PacketPlayOutRespawn::new);
+            Outgoing.SCOREBOARD_DISPLAY_OBJECTIVE = new Outgoing(PacketPlayOutScoreboardDisplayObjective.class, PacketPlayOutScoreboardDisplayObjective::new);
+            Outgoing.SCOREBOARD_OBJECTIVE = new Outgoing(PacketPlayOutScoreboardObjective.class, PacketPlayOutScoreboardObjective::new);
+            Outgoing.SCOREBOARD_SCORE = new Outgoing(PacketPlayOutScoreboardScore.class, PacketPlayOutScoreboardScore::new);
+            Outgoing.SCOREBOARD_TEAM = new Outgoing(PacketPlayOutScoreboardTeam.class, PacketPlayOutScoreboardTeam::new);
+            Outgoing.SELECT_ADVANCEMENT_TAV = new Outgoing(PacketPlayOutSelectAdvancementTab.class, PacketPlayOutSelectAdvancementTab::new);
+            Outgoing.SERVER_DIFFICULTY = new Outgoing(PacketPlayOutServerDifficulty.class, PacketPlayOutServerDifficulty::new);
+            Outgoing.SET_COOLDOWN = new Outgoing(PacketPlayOutSetCooldown.class, PacketPlayOutSetCooldown::new);
+            Outgoing.SET_SLOT = new Outgoing(PacketPlayOutSetSlot.class, PacketPlayOutSetSlot::new);
+            Outgoing.SPAWN_ENTITY = new Outgoing(PacketPlayOutSpawnEntity.class, PacketPlayOutSpawnEntity::new);
+            Outgoing.SPAWN_EXPERIENCE = new Outgoing(PacketPlayOutSpawnEntityExperienceOrb.class, PacketPlayOutSpawnEntityExperienceOrb::new);
+            Outgoing.SPAWN_LIVING_ENTITY = new Outgoing(PacketPlayOutSpawnEntityLiving.class, PacketPlayOutSpawnEntityLiving::new);
+            Outgoing.SPAWN_PAINTING = new Outgoing(PacketPlayOutSpawnEntityPainting.class, PacketPlayOutSpawnEntityPainting::new);
+            Outgoing.SPAWN_POSITION = new Outgoing(PacketPlayOutSpawnPosition.class, PacketPlayOutSpawnPosition::new);
+            Outgoing.STATISTIC = new Outgoing(PacketPlayOutStatistic.class, PacketPlayOutStatistic::new);
+            Outgoing.STOP_SOUND = new Outgoing(PacketPlayOutStopSound.class, PacketPlayOutStopSound::new);
+            Outgoing.TAB_COMPLETE = new Outgoing(PacketPlayOutTabComplete.class, PacketPlayOutTabComplete::new);
+            Outgoing.TAGS = new Outgoing(PacketPlayOutTags.class, PacketPlayOutTags::new);
+            Outgoing.TILE_ENTITY_DATA = new Outgoing(PacketPlayOutTileEntityData.class, PacketPlayOutTileEntityData::new);
+            Outgoing.TITLE = new Outgoing(PacketPlayOutTitle.class, PacketPlayOutTitle::new);
+            Outgoing.TRANSACTION = new Outgoing(PacketPlayOutTransaction.class, PacketPlayOutTransaction::new);
+            Outgoing.UNLOAD_CHUNK = new Outgoing(PacketPlayOutUnloadChunk.class, PacketPlayOutUnloadChunk::new);
+            Outgoing.UPDATE_ATTRIBUTES = new Outgoing(PacketPlayOutUpdateAttributes.class, PacketPlayOutUpdateAttributes::new);
+            Outgoing.UPDATE_HEALTH = new Outgoing(PacketPlayOutUpdateHealth.class, PacketPlayOutUpdateHealth::new);
+            Outgoing.UPDATE_TIME = new Outgoing(PacketPlayOutUpdateTime.class, PacketPlayOutUpdateTime::new);
+            Outgoing.VEHICLE_MOVE = new Outgoing(PacketPlayOutVehicleMove.class, PacketPlayOutVehicleMove::new);
+            Outgoing.VIEW_CENTRE = new Outgoing(PacketPlayOutViewCentre.class, PacketPlayOutViewCentre::new);
+            Outgoing.VIEW_DISTANCE = new Outgoing(PacketPlayOutViewDistance.class, PacketPlayOutViewDistance::new);
+            Outgoing.WINDOW_DATA = new Outgoing(PacketPlayOutWindowData.class, PacketPlayOutWindowData::new);
+            Outgoing.WINDOW_ITEMS = new Outgoing(PacketPlayOutWindowItems.class, PacketPlayOutWindowItems::new);
+            Outgoing.WORLD_BORDER = new Outgoing(PacketPlayOutWorldBorder.class, PacketPlayOutWorldBorder::new);
+            Outgoing.WORLD_EVENT = new Outgoing(PacketPlayOutWorldEvent.class, PacketPlayOutWorldEvent::new);
+            Outgoing.WORLD_PARTICLES = new Outgoing(PacketPlayOutWorldParticles.class, PacketPlayOutWorldParticles::new);
         }
     }
 
@@ -259,4 +262,12 @@ public class PacketFactoryImpl extends PacketFactory {
             throw new IllegalArgumentException("Unable to create packet: ", e);
         }
     }
+
+    @Override
+    public void send(Packet packet, Player... recipients) throws IllegalArgumentException {
+        for (Player recipient : recipients) {
+            CraftPlayer player = ((CraftPlayer) recipient);
+            player.getHandle().playerConnection.networkManager.sendPacket((net.minecraft.server.Packet<?>) packet);
+        }
+    }
 }
