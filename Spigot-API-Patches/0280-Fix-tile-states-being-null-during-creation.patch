From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Moderocky <admin@moderocky.com>
Date: Sat, 10 Oct 2020 17:40:00 +0100
Subject: [PATCH] Fix tile states being null during creation.


diff --git a/src/main/java/mx/kenzie/wellspring/tile/TileEntity.java b/src/main/java/mx/kenzie/wellspring/tile/TileEntity.java
index e4a3190b0e11cf4b41a760e9b3ca62eca8d171e0..8a7255407efac06390bddc2398a18ac24541f5fb 100644
--- a/src/main/java/mx/kenzie/wellspring/tile/TileEntity.java
+++ b/src/main/java/mx/kenzie/wellspring/tile/TileEntity.java
@@ -5,6 +5,7 @@ import org.bukkit.Location;
 import org.bukkit.attachment.Attachable;
 import org.bukkit.block.TileState;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents an actual, unchanging tile entity within the
@@ -24,9 +25,11 @@ public interface TileEntity extends NBTHolder, Attachable {
 
     /**
      * Provides a snapshot tile state of this tile entity.
+     * Nullable during creation.
+     *
      * @return the snapshot
      */
-    @NotNull
+    @Nullable
     TileState getState();
 
     /**
@@ -38,7 +41,7 @@ public interface TileEntity extends NBTHolder, Attachable {
      *
      * @return the location
      */
-    @NotNull
+    @Nullable
     Location getLocation();
 
     @NotNull
diff --git a/src/main/java/mx/kenzie/wellspring/tile/TileType.java b/src/main/java/mx/kenzie/wellspring/tile/TileType.java
index 6556e76e7bcaf5bdd9a38b73cacb2b6537c10a52..bfac1922c3463ed537cea8b3bac8a5754e643299 100644
--- a/src/main/java/mx/kenzie/wellspring/tile/TileType.java
+++ b/src/main/java/mx/kenzie/wellspring/tile/TileType.java
@@ -2,6 +2,9 @@ package mx.kenzie.wellspring.tile;
 
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
+import org.bukkit.block.*;
+import org.bukkit.block.Comparator;
+import org.bukkit.block.data.type.Piston;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -25,50 +28,61 @@ import java.util.function.Supplier;
  */
 public final class TileType {
 
-    public static final TileType FURNACE = create("furnace", Material.FURNACE);
-    public static final TileType CHEST = create("chest", Material.CHEST);
-    public static final TileType TRAPPED_CHEST = create("trapped_chest", Material.TRAPPED_CHEST);
-    public static final TileType ENDER_CHEST = create("ender_chest", Material.ENDER_CHEST);
-    public static final TileType JUKEBOX = create("jukebox", Material.JUKEBOX);
-    public static final TileType DISPENSER = create("dispenser", Material.DISPENSER);
-    public static final TileType DROPPER = create("dropper", Material.DROPPER);
-    public static final TileType SIGN = create("sign", Material.OAK_SIGN, Material.SPRUCE_SIGN, Material.BIRCH_SIGN, Material.ACACIA_SIGN, Material.JUNGLE_SIGN, Material.DARK_OAK_SIGN, Material.OAK_WALL_SIGN, Material.SPRUCE_WALL_SIGN, Material.BIRCH_WALL_SIGN, Material.ACACIA_WALL_SIGN, Material.JUNGLE_WALL_SIGN, Material.DARK_OAK_WALL_SIGN, Material.CRIMSON_SIGN, Material.CRIMSON_WALL_SIGN, Material.WARPED_SIGN, Material.WARPED_WALL_SIGN);
-    public static final TileType MOB_SPAWNER = create("mob_spawner", Material.SPAWNER);
-    public static final TileType PISTON = create("piston", Material.MOVING_PISTON);
-    public static final TileType BREWING_STAND = create("brewing_stand", Material.BREWING_STAND);
-    public static final TileType ENCHANTING_TABLE = create("enchanting_table", Material.ENCHANTING_TABLE);
-    public static final TileType END_PORTAL = create("end_portal", Material.END_PORTAL);
-    public static final TileType BEACON = create("beacon", Material.BEACON);
-    public static final TileType SKULL = create("skull", Material.SKELETON_SKULL, Material.SKELETON_WALL_SKULL, Material.CREEPER_HEAD, Material.CREEPER_WALL_HEAD, Material.DRAGON_HEAD, Material.DRAGON_WALL_HEAD, Material.ZOMBIE_HEAD, Material.ZOMBIE_WALL_HEAD, Material.WITHER_SKELETON_SKULL, Material.WITHER_SKELETON_WALL_SKULL, Material.PLAYER_HEAD, Material.PLAYER_WALL_HEAD);
-    public static final TileType DAYLIGHT_DETECTOR = create("daylight_detector", Material.DAYLIGHT_DETECTOR);
-    public static final TileType HOPPER = create("hopper", Material.HOPPER);
-    public static final TileType COMPARATOR = create("comparator", Material.COMPARATOR);
-    public static final TileType BANNER = create("banner", Material.WHITE_BANNER, Material.ORANGE_BANNER, Material.MAGENTA_BANNER, Material.LIGHT_BLUE_BANNER, Material.YELLOW_BANNER, Material.LIME_BANNER, Material.PINK_BANNER, Material.GRAY_BANNER, Material.LIGHT_GRAY_BANNER, Material.CYAN_BANNER, Material.PURPLE_BANNER, Material.BLUE_BANNER, Material.BROWN_BANNER, Material.GREEN_BANNER, Material.RED_BANNER, Material.BLACK_BANNER, Material.WHITE_WALL_BANNER, Material.ORANGE_WALL_BANNER, Material.MAGENTA_WALL_BANNER, Material.LIGHT_BLUE_WALL_BANNER, Material.YELLOW_WALL_BANNER, Material.LIME_WALL_BANNER, Material.PINK_WALL_BANNER, Material.GRAY_WALL_BANNER, Material.LIGHT_GRAY_WALL_BANNER, Material.CYAN_WALL_BANNER, Material.PURPLE_WALL_BANNER, Material.BLUE_WALL_BANNER, Material.BROWN_WALL_BANNER, Material.GREEN_WALL_BANNER, Material.RED_WALL_BANNER, Material.BLACK_WALL_BANNER);
-    public static final TileType STRUCTURE_BLOCK = create("structure_block", Material.STRUCTURE_BLOCK);
-    public static final TileType END_GATEWAY = create("end_gateway", Material.END_GATEWAY);
-    public static final TileType COMMAND_BLOCK = create("command_block", Material.COMMAND_BLOCK, Material.CHAIN_COMMAND_BLOCK, Material.REPEATING_COMMAND_BLOCK);
-    public static final TileType SHULKER_BOX = create("shulker_box", Material.SHULKER_BOX, Material.BLACK_SHULKER_BOX, Material.BLUE_SHULKER_BOX, Material.BROWN_SHULKER_BOX, Material.CYAN_SHULKER_BOX, Material.GRAY_SHULKER_BOX, Material.GREEN_SHULKER_BOX, Material.LIGHT_BLUE_SHULKER_BOX, Material.LIGHT_GRAY_SHULKER_BOX, Material.LIME_SHULKER_BOX, Material.MAGENTA_SHULKER_BOX, Material.ORANGE_SHULKER_BOX, Material.PINK_SHULKER_BOX, Material.PURPLE_SHULKER_BOX, Material.RED_SHULKER_BOX, Material.WHITE_SHULKER_BOX, Material.YELLOW_SHULKER_BOX);
-    public static final TileType BED = create("bed", Material.RED_BED, Material.BLACK_BED, Material.BLUE_BED, Material.BROWN_BED, Material.CYAN_BED, Material.GRAY_BED, Material.GREEN_BED, Material.LIGHT_BLUE_BED, Material.LIGHT_GRAY_BED, Material.LIME_BED, Material.MAGENTA_BED, Material.ORANGE_BED, Material.PINK_BED, Material.PURPLE_BED, Material.WHITE_BED, Material.YELLOW_BED);
-    public static final TileType CONDUIT = create("conduit", Material.CONDUIT);
-    public static final TileType BARREL = create("barrel", Material.BARREL);
-    public static final TileType SMOKER = create("smoker", Material.SMOKER);
-    public static final TileType BLAST_FURNACE = create("blast_furnace", Material.BLAST_FURNACE);
-    public static final TileType LECTERN = create("lectern", Material.LECTERN);
-    public static final TileType BELL = create("bell", Material.BELL);
-    public static final TileType JIGSAW = create("jigsaw", Material.JIGSAW);
-    public static final TileType CAMPFIRE = create("campfire", Material.CAMPFIRE, Material.SOUL_CAMPFIRE);
-    public static final TileType BEEHIVE = create("beehive", Material.BEE_NEST, Material.BEEHIVE);
+    public static final TileType FURNACE = create("furnace", Furnace.class, Material.FURNACE);
+    public static final TileType CHEST = create("chest", Chest.class, Material.CHEST);
+    public static final TileType TRAPPED_CHEST = create("trapped_chest", Chest.class, Material.TRAPPED_CHEST);
+    public static final TileType ENDER_CHEST = create("ender_chest", EnderChest.class, Material.ENDER_CHEST);
+    public static final TileType JUKEBOX = create("jukebox", Jukebox.class, Material.JUKEBOX);
+    public static final TileType DISPENSER = create("dispenser", Dispenser.class, Material.DISPENSER);
+    public static final TileType DROPPER = create("dropper", Dropper.class, Material.DROPPER);
+    public static final TileType SIGN = create("sign", Sign.class, Material.OAK_SIGN, Material.SPRUCE_SIGN, Material.BIRCH_SIGN, Material.ACACIA_SIGN, Material.JUNGLE_SIGN, Material.DARK_OAK_SIGN, Material.OAK_WALL_SIGN, Material.SPRUCE_WALL_SIGN, Material.BIRCH_WALL_SIGN, Material.ACACIA_WALL_SIGN, Material.JUNGLE_WALL_SIGN, Material.DARK_OAK_WALL_SIGN, Material.CRIMSON_SIGN, Material.CRIMSON_WALL_SIGN, Material.WARPED_SIGN, Material.WARPED_WALL_SIGN);
+    public static final TileType MOB_SPAWNER = create("mob_spawner", CreatureSpawner.class, Material.SPAWNER);
+    public static final TileType PISTON = create("piston", TileState.class, Material.MOVING_PISTON);
+    public static final TileType BREWING_STAND = create("brewing_stand", BrewingStand.class, Material.BREWING_STAND);
+    public static final TileType ENCHANTING_TABLE = create("enchanting_table", EnchantingTable.class, Material.ENCHANTING_TABLE);
+    public static final TileType END_PORTAL = create("end_portal", TileState.class, Material.END_PORTAL);
+    public static final TileType BEACON = create("beacon", Beacon.class, Material.BEACON);
+    public static final TileType SKULL = create("skull", Skull.class, Material.SKELETON_SKULL, Material.SKELETON_WALL_SKULL, Material.CREEPER_HEAD, Material.CREEPER_WALL_HEAD, Material.DRAGON_HEAD, Material.DRAGON_WALL_HEAD, Material.ZOMBIE_HEAD, Material.ZOMBIE_WALL_HEAD, Material.WITHER_SKELETON_SKULL, Material.WITHER_SKELETON_WALL_SKULL, Material.PLAYER_HEAD, Material.PLAYER_WALL_HEAD);
+    public static final TileType DAYLIGHT_DETECTOR = create("daylight_detector", DaylightDetector.class, Material.DAYLIGHT_DETECTOR);
+    public static final TileType HOPPER = create("hopper", Hopper.class, Material.HOPPER);
+    public static final TileType COMPARATOR = create("comparator", Comparator.class, Material.COMPARATOR);
+    public static final TileType BANNER = create("banner", Banner.class, Material.WHITE_BANNER, Material.ORANGE_BANNER, Material.MAGENTA_BANNER, Material.LIGHT_BLUE_BANNER, Material.YELLOW_BANNER, Material.LIME_BANNER, Material.PINK_BANNER, Material.GRAY_BANNER, Material.LIGHT_GRAY_BANNER, Material.CYAN_BANNER, Material.PURPLE_BANNER, Material.BLUE_BANNER, Material.BROWN_BANNER, Material.GREEN_BANNER, Material.RED_BANNER, Material.BLACK_BANNER, Material.WHITE_WALL_BANNER, Material.ORANGE_WALL_BANNER, Material.MAGENTA_WALL_BANNER, Material.LIGHT_BLUE_WALL_BANNER, Material.YELLOW_WALL_BANNER, Material.LIME_WALL_BANNER, Material.PINK_WALL_BANNER, Material.GRAY_WALL_BANNER, Material.LIGHT_GRAY_WALL_BANNER, Material.CYAN_WALL_BANNER, Material.PURPLE_WALL_BANNER, Material.BLUE_WALL_BANNER, Material.BROWN_WALL_BANNER, Material.GREEN_WALL_BANNER, Material.RED_WALL_BANNER, Material.BLACK_WALL_BANNER);
+    public static final TileType STRUCTURE_BLOCK = create("structure_block", Structure.class, Material.STRUCTURE_BLOCK);
+    public static final TileType END_GATEWAY = create("end_gateway", EndGateway.class, Material.END_GATEWAY);
+    public static final TileType COMMAND_BLOCK = create("command_block", CommandBlock.class, Material.COMMAND_BLOCK, Material.CHAIN_COMMAND_BLOCK, Material.REPEATING_COMMAND_BLOCK);
+    public static final TileType SHULKER_BOX = create("shulker_box", ShulkerBox.class, Material.SHULKER_BOX, Material.BLACK_SHULKER_BOX, Material.BLUE_SHULKER_BOX, Material.BROWN_SHULKER_BOX, Material.CYAN_SHULKER_BOX, Material.GRAY_SHULKER_BOX, Material.GREEN_SHULKER_BOX, Material.LIGHT_BLUE_SHULKER_BOX, Material.LIGHT_GRAY_SHULKER_BOX, Material.LIME_SHULKER_BOX, Material.MAGENTA_SHULKER_BOX, Material.ORANGE_SHULKER_BOX, Material.PINK_SHULKER_BOX, Material.PURPLE_SHULKER_BOX, Material.RED_SHULKER_BOX, Material.WHITE_SHULKER_BOX, Material.YELLOW_SHULKER_BOX);
+    public static final TileType BED = create("bed", Bed.class, Material.RED_BED, Material.BLACK_BED, Material.BLUE_BED, Material.BROWN_BED, Material.CYAN_BED, Material.GRAY_BED, Material.GREEN_BED, Material.LIGHT_BLUE_BED, Material.LIGHT_GRAY_BED, Material.LIME_BED, Material.MAGENTA_BED, Material.ORANGE_BED, Material.PINK_BED, Material.PURPLE_BED, Material.WHITE_BED, Material.YELLOW_BED);
+    public static final TileType CONDUIT = create("conduit", Conduit.class, Material.CONDUIT);
+    public static final TileType BARREL = create("barrel", Barrel.class, Material.BARREL);
+    public static final TileType SMOKER = create("smoker", Smoker.class, Material.SMOKER);
+    public static final TileType BLAST_FURNACE = create("blast_furnace", BlastFurnace.class, Material.BLAST_FURNACE);
+    public static final TileType LECTERN = create("lectern", Lectern.class, Material.LECTERN);
+    public static final TileType BELL = create("bell", Bell.class, Material.BELL);
+    public static final TileType JIGSAW = create("jigsaw", Jigsaw.class, Material.JIGSAW);
+    public static final TileType CAMPFIRE = create("campfire", Campfire.class, Material.CAMPFIRE, Material.SOUL_CAMPFIRE);
+    public static final TileType BEEHIVE = create("beehive", Beehive.class, Material.BEE_NEST, Material.BEEHIVE);
     @Deprecated
-    public static final TileType UNKNOWN = create("unknown");
+    public static final TileType UNKNOWN = create("unknown", TileState.class);
 
     private static final Map<NamespacedKey, TileType> MAP = new LinkedHashMap<>();
 
     private final @NotNull NamespacedKey key;
     private final @NotNull Material[] materials;
+    private final @NotNull Class<? extends TileState> state;
 
     private TileType(@NotNull NamespacedKey key, @NotNull Material... materials) {
+        this(key, TileState.class, materials);
+    }
+    
+    private TileType(@NotNull NamespacedKey key, @NotNull Class<? extends TileState> state, @NotNull Material... materials) {
         this.key = key;
         this.materials = materials;
+        this.state = state;
+    }
+
+    @NotNull
+    public Class<? extends TileState> getState() {
+        return state;
     }
 
     public final @NotNull
@@ -80,6 +94,17 @@ public final class TileType {
     NamespacedKey getKey() {
         return key;
     }
+    
+    public static @NotNull
+    TileType get(@NotNull Class<? extends TileState> cls) {
+        for (TileType type : MAP.values()) {
+            if (type.state == cls) return type;
+        }
+        for (TileType type : MAP.values()) {
+            if (cls.isAssignableFrom(type.state)) return type;
+        }
+        return UNKNOWN;
+    }
 
     public static @NotNull
     TileType get(@NotNull NamespacedKey key) {
@@ -100,8 +125,11 @@ public final class TileType {
     }
 
     private static @NotNull
-    TileType create(@NotNull String key, @NotNull Material... materials) {
-        return create(NamespacedKey.minecraft(key), materials);
+    TileType create(@NotNull String name, @NotNull Class<? extends TileState> state, @NotNull Material... materials) {
+        final NamespacedKey key = NamespacedKey.minecraft(name);
+        TileType tile = new TileType(key, state, materials);
+        MAP.put(key, tile);
+        return tile;
     }
 
 }
