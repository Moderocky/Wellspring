From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Moderocky <admin@moderocky.com>
Date: Mon, 28 Sep 2020 20:44:56 +0100
Subject: [PATCH] Begin packet converters.


diff --git a/src/main/java/mx/kenzie/wellspring/conversion/BiConverter.java b/src/main/java/mx/kenzie/wellspring/conversion/BiConverter.java
new file mode 100644
index 0000000000000000000000000000000000000000..3dcb287cbe4fe2e03b3121a88a793bca38760e74
--- /dev/null
+++ b/src/main/java/mx/kenzie/wellspring/conversion/BiConverter.java
@@ -0,0 +1,23 @@
+package mx.kenzie.wellspring.conversion;
+
+import org.bukkit.UndefinedNullability;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public interface BiConverter<X, Y>  extends Converter<X, Y> {
+
+    @UndefinedNullability
+    @Contract(value = "null -> null", pure = true)
+    X to(@Nullable Y y);
+
+    @Override
+    @UndefinedNullability
+    @Contract(value = "null -> null", pure = true)
+    Y from(@Nullable X x);
+
+    default @NotNull Converter<Y, X> reverse() {
+        return this::to;
+    }
+
+}
diff --git a/src/main/java/mx/kenzie/wellspring/conversion/Converter.java b/src/main/java/mx/kenzie/wellspring/conversion/Converter.java
new file mode 100644
index 0000000000000000000000000000000000000000..97f504744c8a99fcbd5452fa4d89068cb740c577
--- /dev/null
+++ b/src/main/java/mx/kenzie/wellspring/conversion/Converter.java
@@ -0,0 +1,15 @@
+package mx.kenzie.wellspring.conversion;
+
+import org.bukkit.UndefinedNullability;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+@FunctionalInterface
+public interface Converter<X, Y> {
+
+    @UndefinedNullability
+    @Contract(value = "null -> null", pure = true)
+    Y from(@Nullable X x);
+
+}
diff --git a/src/main/java/mx/kenzie/wellspring/packet/PacketFactory.java b/src/main/java/mx/kenzie/wellspring/packet/PacketFactory.java
index 44b7f01813597acfbc7b2b2381c7bdc3f6246ab3..c00b015a400f29fe71dfc5101c31d16dd28f435f 100644
--- a/src/main/java/mx/kenzie/wellspring/packet/PacketFactory.java
+++ b/src/main/java/mx/kenzie/wellspring/packet/PacketFactory.java
@@ -1,5 +1,7 @@
 package mx.kenzie.wellspring.packet;
 
+import mx.kenzie.wellspring.conversion.BiConverter;
+import mx.kenzie.wellspring.conversion.Converter;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.advancement.Advancement;
@@ -10,10 +12,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Player;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collection;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 
 /**
  * For creating and sending outgoing packets to the client.
@@ -24,6 +23,18 @@ import java.util.UUID;
  */
 public abstract class PacketFactory {
 
+    protected HashMap<Class<?>, ConversionEntry<?, ?>> converters = new HashMap<>();
+
+    public <X, Y> void registerConverter(@NotNull Converter<X, Y> converter, Class<X> from, Class<Y> to) {
+        ConversionEntry<X, Y> entry = new ConversionEntry<>(converter, from, to);
+        converters.put(from, entry);
+    }
+
+    public <X, Y> void registerConverter(@NotNull BiConverter<X, Y> converter, Class<X> from, Class<Y> to) {
+        registerConverter((Converter<X, Y>) converter, from, to);
+        registerConverter(converter.reverse(), to, from);
+    }
+
     /**
      * Creates a packet from the given type using a builder system.
      * This allows you to input the field values of the packet directly.
@@ -76,4 +87,29 @@ public abstract class PacketFactory {
 
     public abstract void send(@NotNull Packet packet, @NotNull Player... recipients) throws IllegalArgumentException;
 
+
+    protected static class ConversionEntry<X, Y> {
+        public final Converter<X, Y> converter;
+        public final Class<X> from;
+        public final Class<Y> to;
+
+        public ConversionEntry(Converter<X, Y> converter, Class<X> from, Class<Y> to) {
+            this.converter = converter;
+            this.from = from;
+            this.to = to;
+        }
+
+        public Converter<X, Y> getConverter() {
+            return converter;
+        }
+
+        public Class<X> getFrom() {
+            return from;
+        }
+
+        public Class<Y> getTo() {
+            return to;
+        }
+    }
+
 }
