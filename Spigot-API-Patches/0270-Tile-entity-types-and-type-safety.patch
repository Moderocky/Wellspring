From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Moderocky <admin@moderocky.com>
Date: Tue, 6 Oct 2020 10:43:30 +0100
Subject: [PATCH] Tile entity types and type safety.


diff --git a/src/main/java/mx/kenzie/wellspring/tile/TileEntity.java b/src/main/java/mx/kenzie/wellspring/tile/TileEntity.java
index 44e4208692dabf3553eb478f31d490aa785cc562..db0853ccbe9ef203ce53b6c3401f99b19f33b8e3 100644
--- a/src/main/java/mx/kenzie/wellspring/tile/TileEntity.java
+++ b/src/main/java/mx/kenzie/wellspring/tile/TileEntity.java
@@ -29,9 +29,17 @@ public interface TileEntity extends NBTHolder, Attachable {
 
     /**
      * Provides the actual location of this tile entity.
+     *
+     * Note that during an attachment initialisation this will
+     * not be the correct location - minecraft assigns the location
+     * post-creation.
+     *
      * @return the location
      */
     @NotNull
     Location getLocation();
 
+    @NotNull
+    TileType getType();
+
 }
diff --git a/src/main/java/mx/kenzie/wellspring/tile/TileType.java b/src/main/java/mx/kenzie/wellspring/tile/TileType.java
new file mode 100644
index 0000000000000000000000000000000000000000..11e9d84d2cdbea4ebe74a6ccd2f5a2bb88c06600
--- /dev/null
+++ b/src/main/java/mx/kenzie/wellspring/tile/TileType.java
@@ -0,0 +1,92 @@
+package mx.kenzie.wellspring.tile;
+
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.*;
+import java.util.function.Supplier;
+
+public final class TileType {
+
+    public static final TileType FURNACE = create("furnace", Material.FURNACE);
+    public static final TileType CHEST = create("chest", Material.CHEST);
+    public static final TileType TRAPPED_CHEST = create("trapped_chest", Material.TRAPPED_CHEST);
+    public static final TileType ENDER_CHEST = create("ender_chest", Material.ENDER_CHEST);
+    public static final TileType JUKEBOX = create("jukebox", Material.JUKEBOX);
+    public static final TileType DISPENSER = create("dispenser", Material.DISPENSER);
+    public static final TileType DROPPER = create("dropper", Material.DROPPER);
+    public static final TileType SIGN = create("sign", Material.OAK_SIGN, Material.SPRUCE_SIGN, Material.BIRCH_SIGN, Material.ACACIA_SIGN, Material.JUNGLE_SIGN, Material.DARK_OAK_SIGN, Material.OAK_WALL_SIGN, Material.SPRUCE_WALL_SIGN, Material.BIRCH_WALL_SIGN, Material.ACACIA_WALL_SIGN, Material.JUNGLE_WALL_SIGN, Material.DARK_OAK_WALL_SIGN, Material.CRIMSON_SIGN, Material.CRIMSON_WALL_SIGN, Material.WARPED_SIGN, Material.WARPED_WALL_SIGN);
+    public static final TileType MOB_SPAWNER = create("mob_spawner", Material.SPAWNER);
+    public static final TileType PISTON = create("piston", Material.MOVING_PISTON);
+    public static final TileType BREWING_STAND = create("brewing_stand", Material.BREWING_STAND);
+    public static final TileType ENCHANTING_TABLE = create("enchanting_table", Material.ENCHANTING_TABLE);
+    public static final TileType END_PORTAL = create("end_portal", Material.END_PORTAL);
+    public static final TileType BEACON = create("beacon", Material.BEACON);
+    public static final TileType SKULL = create("skull", Material.SKELETON_SKULL, Material.SKELETON_WALL_SKULL, Material.CREEPER_HEAD, Material.CREEPER_WALL_HEAD, Material.DRAGON_HEAD, Material.DRAGON_WALL_HEAD, Material.ZOMBIE_HEAD, Material.ZOMBIE_WALL_HEAD, Material.WITHER_SKELETON_SKULL, Material.WITHER_SKELETON_WALL_SKULL, Material.PLAYER_HEAD, Material.PLAYER_WALL_HEAD);
+    public static final TileType DAYLIGHT_DETECTOR = create("daylight_detector", Material.DAYLIGHT_DETECTOR);
+    public static final TileType HOPPER = create("hopper", Material.HOPPER);
+    public static final TileType COMPARATOR = create("comparator", Material.COMPARATOR);
+    public static final TileType BANNER = create("banner", Material.WHITE_BANNER, Material.ORANGE_BANNER, Material.MAGENTA_BANNER, Material.LIGHT_BLUE_BANNER, Material.YELLOW_BANNER, Material.LIME_BANNER, Material.PINK_BANNER, Material.GRAY_BANNER, Material.LIGHT_GRAY_BANNER, Material.CYAN_BANNER, Material.PURPLE_BANNER, Material.BLUE_BANNER, Material.BROWN_BANNER, Material.GREEN_BANNER, Material.RED_BANNER, Material.BLACK_BANNER, Material.WHITE_WALL_BANNER, Material.ORANGE_WALL_BANNER, Material.MAGENTA_WALL_BANNER, Material.LIGHT_BLUE_WALL_BANNER, Material.YELLOW_WALL_BANNER, Material.LIME_WALL_BANNER, Material.PINK_WALL_BANNER, Material.GRAY_WALL_BANNER, Material.LIGHT_GRAY_WALL_BANNER, Material.CYAN_WALL_BANNER, Material.PURPLE_WALL_BANNER, Material.BLUE_WALL_BANNER, Material.BROWN_WALL_BANNER, Material.GREEN_WALL_BANNER, Material.RED_WALL_BANNER, Material.BLACK_WALL_BANNER);
+    public static final TileType STRUCTURE_BLOCK = create("structure_block", Material.STRUCTURE_BLOCK);
+    public static final TileType END_GATEWAY = create("end_gateway", Material.END_GATEWAY);
+    public static final TileType COMMAND_BLOCK = create("command_block", Material.COMMAND_BLOCK, Material.CHAIN_COMMAND_BLOCK, Material.REPEATING_COMMAND_BLOCK);
+    public static final TileType SHULKER_BOX = create("shulker_box", Material.SHULKER_BOX, Material.BLACK_SHULKER_BOX, Material.BLUE_SHULKER_BOX, Material.BROWN_SHULKER_BOX, Material.CYAN_SHULKER_BOX, Material.GRAY_SHULKER_BOX, Material.GREEN_SHULKER_BOX, Material.LIGHT_BLUE_SHULKER_BOX, Material.LIGHT_GRAY_SHULKER_BOX, Material.LIME_SHULKER_BOX, Material.MAGENTA_SHULKER_BOX, Material.ORANGE_SHULKER_BOX, Material.PINK_SHULKER_BOX, Material.PURPLE_SHULKER_BOX, Material.RED_SHULKER_BOX, Material.WHITE_SHULKER_BOX, Material.YELLOW_SHULKER_BOX);
+    public static final TileType BED = create("bed", Material.RED_BED, Material.BLACK_BED, Material.BLUE_BED, Material.BROWN_BED, Material.CYAN_BED, Material.GRAY_BED, Material.GREEN_BED, Material.LIGHT_BLUE_BED, Material.LIGHT_GRAY_BED, Material.LIME_BED, Material.MAGENTA_BED, Material.ORANGE_BED, Material.PINK_BED, Material.PURPLE_BED, Material.WHITE_BED, Material.YELLOW_BED);
+    public static final TileType CONDUIT = create("conduit", Material.CONDUIT);
+    public static final TileType BARREL = create("barrel", Material.BARREL);
+    public static final TileType SMOKER = create("smoker", Material.SMOKER);
+    public static final TileType BLAST_FURNACE = create("blast_furnace", Material.BLAST_FURNACE);
+    public static final TileType LECTERN = create("lectern", Material.LECTERN);
+    public static final TileType BELL = create("bell", Material.BELL);
+    public static final TileType JIGSAW = create("jigsaw", Material.JIGSAW);
+    public static final TileType CAMPFIRE = create("campfire", Material.CAMPFIRE, Material.SOUL_CAMPFIRE);
+    public static final TileType BEEHIVE = create("beehive", Material.BEE_NEST, Material.BEEHIVE);
+    @Deprecated
+    public static final TileType UNKNOWN = create("unknown");
+
+    private static final Map<NamespacedKey, TileType> MAP = new LinkedHashMap<>();
+
+    private final @NotNull NamespacedKey key;
+    private final @NotNull Material[] materials;
+
+    private TileType(@NotNull NamespacedKey key, @NotNull Material... materials) {
+        this.key = key;
+        this.materials = materials;
+    }
+
+    public final @NotNull
+    List<Material> getMaterials() {
+        return Arrays.asList(materials);
+    }
+
+    public final @NotNull
+    NamespacedKey getKey() {
+        return key;
+    }
+
+    public static @NotNull
+    TileType get(@NotNull NamespacedKey key) {
+        return MAP.getOrDefault(key, UNKNOWN);
+    }
+
+    public static @NotNull
+    TileType get(@NotNull String key) {
+        return MAP.getOrDefault(NamespacedKey.minecraft(key), UNKNOWN);
+    }
+
+    public static @NotNull
+    TileType create(@NotNull NamespacedKey key, @NotNull Material... materials) {
+        if (MAP.containsKey(key)) throw new IllegalArgumentException("A tile type with this key already exists!");
+        TileType tile = new TileType(key, materials);
+        MAP.put(key, tile);
+        return tile;
+    }
+
+    private static @NotNull
+    TileType create(@NotNull String key, @NotNull Material... materials) {
+        return create(NamespacedKey.minecraft(key), materials);
+    }
+
+}
diff --git a/src/main/java/org/bukkit/attachment/Attachment.java b/src/main/java/org/bukkit/attachment/Attachment.java
index fdc77f05fb36870312521d5c9b046b63aba00e89..6d3dbe01c0d29a7fa0e44b88a836910a959f12fa 100644
--- a/src/main/java/org/bukkit/attachment/Attachment.java
+++ b/src/main/java/org/bukkit/attachment/Attachment.java
@@ -9,6 +9,20 @@ public abstract class Attachment<T extends Attachable> {
 
     private final @NotNull T subject;
 
+    /**
+     * This constructor will be used by the attachment during
+     * creation.
+     *
+     * WARNING!!! The subject will likely not be fully initialised
+     * at this point!
+     * Referencing the subject here may cause unintended behaviour
+     * in some cases.
+     *
+     * E.g. tile entities will be typeless and located at x0, y0, z0
+     * during construction since their metadata is given post-construction.
+     *
+     * @param subject the object this is attached to
+     */
     public Attachment(@NotNull T subject) {
         this.subject = subject;
     }
@@ -40,6 +54,10 @@ public abstract class Attachment<T extends Attachable> {
      * pre-destruction of the attachment's subject.
      * It may not be called in all cases (for example if the subject is
      * removed from memory silently!)
+     *
+     * Some attachments cannot be notified properly pre-disposal.
+     * This is due to there being no simple way to tell when they are
+     * to be garbage-collected without interrupting the process.
      */
     public synchronized void onDisposal() {
 
